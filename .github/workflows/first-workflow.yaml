name: "first ci/cd workflow"

on:
  push:
    branches:
      - '*'


jobs:
  build:
    runs-on: ubuntu-latest
    environment: Dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install dependencies
        run: npm install


      - name: Cache TypeScript build output
        uses: actions/cache@v4
        id: typescript-cache
        with:
          path: dist  # Or whatever your output directory is
          key: ${{ runner.os }}-ts-build-${{ hashFiles('**/*.ts') }}-${{ hashFiles('tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-ts-build-
            ${{ runner.os }}-ts-build-${{ hashFiles('**/*.ts') }}

      - if: ${{ steps.typescript-cache.outputs.cache-hit != 'true' }}
        name: install typescript dependencies
        run: npm install typescript

      - name: Build typescript
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Run ESLint
        run: npm run lint

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/illthizam_dev_sec_ops
          docker build -t $IMAGE_NAME:latest .


      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        
      - name: Build and Push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/illthizam_dev_sec_ops
          # Use branch name as tag, with 'latest' for main branch
          if [ "$BRANCH_NAME" = "main" ]; then
            TAG="latest"
          else
            TAG="$BRANCH_NAME"
          fi
          
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG